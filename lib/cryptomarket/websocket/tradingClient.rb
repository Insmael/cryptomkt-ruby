require_relative "authClient"
require_relative"../utils"

module Cryptomarket
    module Websocket
            
        # TradingClient connects via websocket to cryptomarket to enable the user to manage orders. uses SHA256 as auth method and authenticates automatically.
        #
        # +string+ +apiKey+:: the user api key
        # +string+ +apiSecret+:: the user api secret
        # +Proc+ +callback+:: Optional. A +Proc+ to call with the client once the connection is established and the authentication is successful. if an error ocurrs is return as the fist parameter of the callback: callback(err, client)
        
        class TradingClient < AuthClient
            include Utils
            # Creates a new client
            def initialize(apiKey:, apiSecret:)
                super(url:"wss://api.exchange.cryptomkt.com/api/2/ws/trading", apiKey:apiKey, apiSecret:apiSecret)
            end

            # Subscribe to a feed of trading events of the account
            # 
            # Requires authentication
            # 
            # https://api.exchange.cryptomkt.com/#subscribe-to-reports
            # 
            # +Proc+ +callback+:: A +Proc+ to call with the result data. It takes one argument. a feed of reports
            # +Proc+ +resultCallback+:: Optional. A +Proc+ to call with the result data. It takes two arguments, err and result. err is None for successful calls, result is None for calls with error: Proc.new {|err, result| ...}
            
            def subscribeToReports(callback, resultCallback=nil)
                sendSubscription('subscribeReports', callback, {}, resultCallback)
            end

            # Create a new order
            # 
            # Requires authentication
            # 
            # https://api.exchange.cryptomkt.com/#place-new-order
            # 
            # +String+ +clientOrderId+:: If given must be unique within the trading day, including all active orders. If not given, is generated by the server
            # +String+ +symbol+:: Trading symbol
            # +String+ +side+:: 'buy' or 'sell'
            # +String+ +quantity+:: Order quantity
            # +String+ +type+:: Optional. 'limit', 'market', 'stopLimit' or 'stopMarket'. Default is 'limit'
            # +String+ +timeInForce+:: Optional. 'GTC', 'IOC', 'FOK', 'Day', 'GTD'
            # +String+ +price+:: Required for 'limit' and 'stopLimit'. limit price of the order
            # +String+ +stopPrice+:: Required for 'stopLimit' and 'stopMarket' orders. stop price of the order
            # +String+ +expireTime+:: Required for orders with timeInForce = 'GDT'
            # +bool+ +strictValidate+:: Optional. If False, the server rounds half down for tickerSize and quantityIncrement. Example of ETHBTC: tickSize = '0.000001', then price '0.046016' is valid, '0.0460165' is invalid
            # +bool+ +postOnly+:: Optional. If True, your postOnly order causes a match with a pre-existing order as a taker, then the order will be cancelled
            # +Proc+ +callback+:: Optional. A +Proc+ to call with the result data. It takes two arguments, err and result. err is None for successful calls, result is None for calls with error: Proc.new {|err, result| ...}
            
            def createOrder(clientOrderId:, symbol:, side:, quantity:, type:nil, timeInForce:nil, price:nil, stopPrice:nil, expireTime:nil, strictValidate:nil, postOnly:nil, callback:nil)
                params = {'symbol' => symbol, 'side' => side, 'quantity' => quantity, 'clientOrderId' => clientOrderId}
                extend_hash_with_order_params! params, type:type, timeInForce:timeInForce, price:price, stopPrice:stopPrice, expireTime:expireTime, strictValidate:strictValidate, postOnly:postOnly
                sendById('newOrder', callback, params)
            end

            # Cancel the order with ClientOrderId
            # 
            # Requires authentication
            # 
            # https://api.exchange.cryptomkt.com/#cancel-order
            # 
            # +String+ +clientOrderId+:: The client order id of the order to cancel
            # +Proc+ +callback+:: Optional. A +Proc+ to call with the result data. It takes two arguments, err and result. err is None for successful calls, result is None for calls with error: Proc.new {|err, result| ...}
            
            def cancelOrder(clientOrderId, callback:nil)
                sendById('cancelOrder', callback, {'clientOrderId' => clientOrderId})
            end

            # Rewrites an order, canceling it or replacing it
            # 
            # The Cancel/Replace request is used to change the parameters of an existing order and to change the quantity or price attribute of an open order
            # 
            # Do not use this request to cancel the quantity remaining in an outstanding order. Use the cancel_order for this purpose
            # 
            # It is stipulated that a newly entered order cancels a prior order that has been entered, but not yet executed
            # 
            # Requires authentication
            # 
            # https://api.exchange.cryptomkt.com/#cancel-replace-order
            # 
            # +String+ +clientOrderId+:: The client id of the order to modify
            # +String+ +requestClientId+:: The new id for the modified order
            # +String+ +quantity+:: The new quantity of the order
            # +String+ +price+:: The new price of the order
            # +bool+ +strictValidate+:: Optional. If False, the server rounds half down for tickerSize and quantityIncrement. Example of ETHBTC: tickSize = '0.000001', then price '0.046016' is valid, '0.0460165' is invalid
            # +Proc+ +callback+:: Optional. A +Proc+ to call with the result data. It takes two arguments, err and result. err is None for successful calls, result is None for calls with error: Proc.new {|err, result| ...}
            
            def replaceOrder(clientOrderId:, requestClientId:, quantity:, price:, strictValidate:nil, callback:nil)
                params = {'clientOrderId' => clientOrderId, 'requestClientId' => requestClientId, 'quantity' => quantity, 'price' => price}
                if not strictValidate.nil?
                    params['strictValidate'] = strictValidate
                end
                sendById('cancelReplaceOrder', callback, params)
            end

            # Get the account active orders
            # 
            # Requires authentication
            # 
            # https://api.exchange.cryptomkt.com/#get-active-orders-2
            # 
            # +Proc+ +callback+:: A +Proc+ to call with the result data. It takes two arguments, err and result. err is None for successful calls, result is None for calls with error: Proc.new {|err, result| ...}
            
            def getActiveOrders(callback)
                sendById('getOrders', callback)
            end

            # Get the user trading balance
            # 
            # Requires authentication
            # 
            # https://api.exchange.cryptomkt.com/#get-trading-balance
            # 
            # +Proc+ +callback+:: A +Proc+ to call with the result data. It takes two arguments, err and result. err is None for successful calls, result is None for calls with error: Proc.new {|err, result| ...}
            
            def getTradingBalance(callback)
                sendById('getTradingBalance', callback)
            end
        end
    end
end